# 引入必要模块
include zmq.usl
# 解析消息内容为 JSON
j = __msg.body.content.jsonParse()
#print(j)

# 判断 JSON 是否有效
if (!defined(j)):
    log("Invalid JSON format: " + __msg.body.content)
    exit()

# 获取消息类型
message_type = j.get("Message Type", -1)

# 打开文件并解析内容为 JSON
file = File()
file.open("/home/czl/output.json")
#file.open("/home/nvidia/mydisk/czl/InteroperationApp/data/output.json")
file_content = file.read(65536)
self_data = file_content.jsonParse()

# 构造消息
m = _UniMsg("icp")

# 根据 Message Type 处理
if message_type == 1:
    m.id = m.ids.ICP_ECHO
    caps_data = DB("MYSQL","capability_db", "root","RootPassword123!","127.0.0.1",3306)
    sql = caps_data.select("select * from capabilities")
    if !defined(sql) || sql.length() <= 0:
        log("No caps yet")
    else:
        j = 0
        for i in sql:
            #print(i)
            m.body.cap[j].id = i.CAPID
            m.body.cap[j].version = i.CAPVER
            m.body.cap[j].config = i.CAPCONFIG
            j = j + 1
    m.body.pos.lo = self_data.lon
    m.body.pos.la = self_data.lat
    m.body.pos.al = self_data.ele
    m.body.speed = self_data.spd
    m.body.heading = self_data.hea
    m.body.accel.lo = 1
    m.body.accel.la = 2
    m.body.accel.vert = 3
    m.body.accel.yaw = 4
    m.body.sourceId = "\2A12345"
    m.body.destId = "FFFFFFFF"
elif message_type == 2:
    m.id = m.ids.ICP_SUB
elif message_type == 3:
    m.id = m.ids.ICP_PUB
    m.body.needAck = True
    m.body.op = j.get("Operator",-1)
    m.body.topic = j.get("Topic",-1)
    m.body.communiNetwork = 34
    m.body.packetRL = 1
    m.body.packetQoS = j.get("QoS",-1)
    m.body.sourceId = "\2A12345"
    m.body.destId = "FFFFFFFF"
    m.body.payload = j.get("Data",-1)
else:
    log("Unknown Message Type")
    exit()
print(m)
# 发送消息
send(m, "psaicp.so")

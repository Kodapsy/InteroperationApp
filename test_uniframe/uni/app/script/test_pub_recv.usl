# 引入必要模块
include zmq.usl
# 解析消息内容为 JSON
j = __msg.body.content.jsonParse()
#print(j)

# 判断 JSON 是否有效
if (!defined(j)):
    log("Invalid JSON format: " + __msg.body.content)
    exit()

# 获取消息类型
message_type = j.get("Message Type", -1)
isdata = j.get("Data",-1)

if isdata != '':
    # 打开文件并解析内容为 JSON
    file = File()
    #file.open("/home/czl/InteroperationApp/data/output.json")
    file.open("/home/nvidia/mydisk/czl/InteroperationApp/data/output.json")
    file_content = file.read(65536)
    self_data = file_content.jsonParse()

    # 构造消息
    m = _UniMsg("icp")

    # 根据 Message Type 处理
    if message_type == 1:
        m.id = m.ids.ICP_ECHO
        caps_data = DB("MYSQL","capability_db", "root","RootPassword123!","127.0.0.1",3306)
        sql = caps_data.select("select * from capabilities")
        if !defined(sql) || sql.length() <= 0:
            log("No caps yet")
        else:
            j = 0
            for i in sql:
                #print(i)
                m.body.cap[j].id = i.CAPID
                m.body.cap[j].version = i.CAPVER
                m.body.cap[j].config = i.CAPCONFIG
                j = j + 1
        m.body.pos.lo = self_data.lon
        m.body.pos.la = self_data.lat
        m.body.pos.al = self_data.ele
        m.body.speed = self_data.spd
        m.body.heading = self_data.hea
        m.body.accel.lo = self_data.longAcc
        m.body.accel.la = self_data.latAcc
        m.body.accel.vert = self_data.vertAcc
        m.body.accel.yaw = self_data.yawRate
        m.body.sourceId = "\2A12345"
        m.body.destId = "FFFFFFFF"
    elif message_type == 2:
        m.id = m.ids.ICP_SUB
    elif message_type == 3:
        m.id = m.ids.ICP_PUB
        m.body.needAck = True
        m.body.op = j.get("Operator",-1)
        m.body.topic = j.get("Topic",-1)
        m.body.communiNetwork = 34
        m.body.packetRL = 1
        m.body.packetQoS = j.get("QoS",-1)
        m.body.sourceId = "\2A12345"
        m.body.destId = "FFFFFFFF"
        m.body.payload = j.get("Data",-1)
    else:
        log("Unknown Message Type")
        exit()
    #print(m)
    # 发送消息
    send(m, "psaicp.so")
else:
    itp_file = File()
    #itp_file.open("/home/czl/InteroperationApp/data/itp_data.json")
    itp_file.open("/home/nvidia/mydisk/czl/InteroperationApp/data/itp_data.json")
    
    def applyStream(remoteDevice, ip, port):
        n = _UniMsg('itp')
        n.id = n.ids.ITP_APPLY_STREAM
        n.body.remoteDevice = remoteDevice
        if ip != '':
            n.body.remoteIp = ip
            n.body.remotePort = port
        send(n, "psaitp")

        # 等待申请stream的返回结果
        wait(3, "itp", "ITP_APPLY_STREAM_RSP") # 等待psaitp的返回
        if !defined(__msg): # 等待时间内没有返回消息
            log("apply stream fail: timeout")
            return -1
        if __msg.body.resultCode != 0: # psaitp返回失败
            log("apply stream fail: " + __msg.body.reason)
            return -1
        # 申请成功
        return __msg.body.streamId

    # 这个函数用于发送文件
    def sendFile(streamId, fileName, payloadType):
        n = _UniMsg('itp')
        n.id = n.ids.ITP_SEND_FILE
        n.body.streamId = streamId
        n.body.fileName = fileName
        n.body.payloadType = payloadType
        send(n, "psaitp")


    destId = "FFFFFFFF"
    streamId = applyStream(destId, '', 0)
    if streamId < 0:
        exit()

    # 然后发送文件
    sendFile(streamId, "itp_data", 3)
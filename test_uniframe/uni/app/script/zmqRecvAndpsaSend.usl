# 引入必要模块
include zmq.usl
# 解析消息内容为 JSON
j = __msg.body.content.jsonParse()
#print(j)

# 判断 JSON 是否有效
if (!defined(j)):
    log("Invalid JSON format: " + __msg.body.content)
    exit()

def applyStream(remoteDevice, ip, port, context, sid):
    m = _UniMsg('itp')
    m.id = m.ids.ITP_APPLY_STREAM
    m.body.remoteDevice = remoteDevice
    if ip != '':
        m.body.remoteIp = ip
        m.body.remotePort = port
    mm = {}
    mm.context = context
    mm.sid = sid
    mj = toJson(mm)
    m.body.appContext = mj
    send(m, "psaitp")

    # 等待申请stream的返回结果
    wait(3, "itp", "ITP_APPLY_STREAM_RSP")  # 等待psaitp的返回
    if !defined(__msg):  # 等待时间内没有返回消息
        log("apply stream fail: timeout")
        return -1
    if __msg.body.resultCode != 0:  # psaitp返回失败
        log("apply stream fail: " + __msg.body.reason)
        return -1
    # 申请成功
    return __msg.body.streamId

# 这个函数用于发送文件
def sendFile(streamId, fileName, payloadType):
	m = _UniMsg('itp')
	m.id = m.ids.ITP_SEND_FILE
	m.body.streamId = streamId
	m.body.fileName = fileName
	m.body.payloadType = payloadType
	send(m, "psaitp")
	wait(10)
	if !defined(__msg):
		log("send fail")

def sendData(streamId, data, payloadType):
	m = _UniMsg('itp')
	m.id = m.ids.ITP_SEND_DATA
	m.body.streamId = streamId
	m.body.data = data
	m.body.payloadType = payloadType
	send(m, "psaitp")
	wait(10)
	if !defined(__msg):
		log("send fail")
	
def endStream(streamId):
	m = _UniMsg('itp')
	m.id = m.ids.ITP_END_STREAM
	m.body.streamId = streamId
	send(m, "psaitp")
	
# 获取消息类型
message_type = j.get("Message Type", -1)
mid = j.get("mid",-1)
ip = ''
port = 0

if mid == 101:
    destId = j.get("DestId",-1)
    context = j.get("context",-1)
    sid = (time().toString("%s") + __sys_myaddr).md5()
    val = {}
    val.destId = destId
    val.context = context
    valj = toJson(val)
    GlobDict::set(sid , valj)
    streamId = applyStream(destId, ip, port, context, sid)
    if streamId < 0: 
        print("No usable streamId")
        exit()
    s = {}
    s.sid = sid
    s.did = destId
    s.context = context
    s.Message_type = 4
    s.mid = 102
    sj = toJson(s)
    zmq_publish(sj)
    endStream(streamId)
elif mid == 104:
    sid = j.get("sid",-1)
    data = j.get("data",-1)
    valj = GlobDict::get(sid)
    val = valj.jsonParse()
    destId = val.destId
    context = val.context
    streamId = applyStream(destId, ip, port, context, sid)
    if streamId < 0: 
        print("No usable streamId")
        exit()
    sendData(streamId,data,3)
    endStream(streamId)
elif mid == 106:
    sid = j.get("sid",-1)
    GlobDict::del(sid)
elif mid == 111:
    sid = (time().toString("%s") + __sys_myaddr).md5()
    s = {}
    destId = j.get("DestId",-1)
    context = j.get("context",-1)
    file = j.get("file",-1)
    s.did = destId
    s.context = context
    s.Message_type = 112
    s.file = file
    s.mid = 112
    streamId = applyStream(destId, ip, port, context, sid)
    if streamId < 0: 
        print("No usable streamId")
        exit()
    sendFile(streamId,file,3)
    endStream(streamId)
    sj = toJson(s)
    zmq_publish(sj)
else:
    m = _UniMsg('icp')
    if message_type == 2:
        m.id = m.ids.ICP_SUB
        if ip != '':
            m.body.remoteIp = ip
            m.body.remotePort = port
        m.body.op = j.get("OP",-1)
        m.body.topic = j.get("Topic",-1)
        m.body.sourceId = j.get("SourceId",-1)
        m.body.destId = j.get("DestId","")
        m.body.payload = j.get("Payload",-1)
        m.body.payloadType = j.get("PayloadType",-1)
        m.body.payloadLength = j.get("PayloadLength",-1)
        m.body.encodeMode = j.get("EncodeMode",-1)
    elif message_type == 3:
        m.id = m.ids.ICP_PUB
        if ip != '':
            m.body.remoteIp = ip
            m.body.remotePort = port
        m.body.needAck = True
        m.body.op = j.get("OP",-1)
        m.body.topic = j.get("Topic",-1)
        m.body.sourceId = j.get("SourceId","")
        m.body.destId = j.get("DestId","")
        m.body.payload = j.get("Payload",-1)
        m.body.payloadType = j.get("PayloadType",-1)
        m.body.payloadLength = j.get("PayloadLength",-1)
        m.body.encodeMode = j.get("EncodeMode",-1)
    else:
        log("Unknown Message Type")
        exit()
    print(m)
    # 发送消息
    send(m, "psaicp.so")